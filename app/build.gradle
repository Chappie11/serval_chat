apply plugin: 'com.android.application'

def computeVersionName() {
    // TODO git describe
    return "1.0"
}

def computeVersionCode() {
    // TODO git log | wc
    return 1;
}

def readPassword(String fmt) {
    if (System.console() == null)
        return null;
    return new String(System.console().readPassword(fmt));
}

android {

    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "org.servalproject.servalchat"
        minSdkVersion 8
        targetSdkVersion 23
        versionCode computeVersionCode()
        versionName computeVersionName()
    }

    /* something like this?
    signingConfigs{
        release{
            storeFile = file(RELEASE_STORE_FILE)
            storePassword = readPassword("\n\$ Enter keystore password: ")
            keyAlias = RELEASE_KEY_ALIAS
            keyPassword = readPassword("\n\$ Enter key password: ")
        }
    }

    variantFilter { variant ->
        // TODO test that RELEASE_STORE_FILE is set & valid (or something..)
        if(variant.buildType.name.equals('release') ) {
            variant.setIgnore(true);
        }
    }
    */

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles.add(file('proguard-android.txt'))
            //signingConfig signingConfigs.release
        }
    }

    // built in ndk support isn't quite ready for what we need, call the old make based ndk-build
    sourceSets.main {
        java.srcDirs += 'src/main/jni/serval-dna/java'
        jni.srcDirs = [] // prevent autogen of Android.mk
        jniLibs.srcDirs = ['src/main/libs'] // ndk-build output
    }

    task ndkBuild(type: Exec) {
        def ndkDir = android.ndkDirectory
        commandLine "$ndkDir/ndk-build", '-C', file('src/main/jni').absolutePath, '-j', Runtime.runtime.availableProcessors()
    }

    task ndkClean(type: Exec) {
        def ndkDir = android.ndkDirectory
        commandLine "$ndkDir/ndk-build", '-C', file('src/main/jni').absolutePath, 'clean'
    }

    clean.dependsOn 'ndkClean'

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkBuild
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.android.support:design:23.1.1'
    compile 'com.android.support:support-v4:23.1.1'
    compile 'com.android.support:recyclerview-v7:23.1.1'
}



