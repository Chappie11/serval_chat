import groovy.swing.SwingBuilder;

apply plugin: 'com.android.application'

// based on https://www.timroes.de/2014/01/19/using-password-prompts-with-gradle-build-files/
def readPassword(String fmt) {
    def ret = ''
    if (System.console() == null) {
        new SwingBuilder().edt {
            dialog(modal: true,
                    title: 'Enter password',
                    alwaysOnTop: true,
                    resizable: false,
                    locationRelativeTo: null,
                    pack: true,
                    show: true
            ) {
                vbox {
                    label(text: fmt)
                    input = passwordField()
                    button(defaultButton: true, text: 'OK', actionPerformed: {
                        ret = new String(input.password);
                        dispose();
                    })
                }
            }
        }
    } else {
        ret = new String(System.console().readPassword("\n\$ $fmt"));
    }
    return ret;
}

if (project.hasProperty("ServalChat.properties")) {
    def propFile = file(project.property("ServalChat.properties"))
    if (propFile.exists()) {
        println "Loading additional properties from $propFile"
        def props = new Properties();
        props.load(new FileInputStream(propFile))
        for (p in props) {
            def value = p.value
            if (value.startsWith("./"))
                value = new File(propFile.getParent(), value.substring(2)).absolutePath
            println "${p.key} = $value"
            project.ext[p.key] = value
        }
    }
}

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"
    ext.appName = "ServalChat"

    ext.commitCount = "git rev-list --count HEAD".execute().text.toInteger();
    ext.gitDescribe = "git describe --always --dirty --tags".execute().text.trim();
    ext.commitSha = "git rev-parse HEAD".execute().text.trim();
    ext.cleanBuild = !gitDescribe.contains('-dirty')
    ext.releaseType = "development"
    ext.buildTime = System.currentTimeMillis();

    if (cleanBuild) {
        // work out what kind of build this is based on the most recent git tag
        if (gitDescribe ==~ /[\d.]+/)
            releaseType = "release"
        else if (gitDescribe ==~ /[\d.]+.RC\d+/)
            releaseType = "beta"
        else
            releaseType = "alpha"
    }

    println "Version $commitCount - $releaseType - $gitDescribe"

    defaultConfig {
        applicationId "org.servalproject.servalchat"
        minSdkVersion 9
        targetSdkVersion 26
        versionCode commitCount
        versionName gitDescribe
        // unique, deterministic identifier for an apk compiled from this source code
        buildConfigField "String", "BuildStamp", ("\"" + commitSha + (cleanBuild ? "" : "-" + new Date().getTime()) + "\"");
        buildConfigField "String", "CommitSha", ("\"" + commitSha + "\"");
    }

    signingConfigs {
        release {
            storeFile = project.hasProperty("release.key.store") ?
                    file(project.property("release.key.store")) : null
            if (storeFile && !storeFile.exists())
                storeFile = null;
            // leave blank to force prompting the user
            // but not null so that android thinks it is already configured
            storePassword = ""
            keyAlias = project.findProperty("release.key.alias")
            keyPassword = ""
            v2SigningEnabled = false
        }
    }

    buildTypes {
        debug {
            def manifestId = project.findProperty("debug.manifest.id")
            buildConfigField "String", "ManifestId", manifestId == null ? "null" : "\"$manifestId\"";
            buildConfigField "long", "ManifestVersion", "${buildTime}L";
            buildConfigField "String", "ReleaseType", ("\"debug\"");
        }
        release {
            minifyEnabled false
            proguardFiles.add(file('proguard-android.txt'))
            def manifestId = project.findProperty("${releaseType}.manifest.id")
            buildConfigField "String", "ManifestId", manifestId == null ? "null" : "\"$manifestId\"";
            buildConfigField "long", "ManifestVersion", releaseType == "development" ? "${buildTime}L" : "$commitCount";
            buildConfigField "String", "ReleaseType", ("\"" + releaseType + "\"");
            // leave the apk unsigned for a release build if config is missing
            if (signingConfigs.release.storeFile)
                signingConfig signingConfigs.release
        }
    }

    sourceSets.main {
        java.srcDirs += 'src/main/jni/serval-dna/java-api/src'
        // built in ndk support isn't quite ready for what we need, call the old make based ndk-build
        jni.srcDirs = [] // prevent autogen of Android.mk
        jniLibs.srcDirs = ['src/main/libs'] // ndk-build output
    }

    task libsodiumBuild(type: Exec) {
        // since there's no defined inputs, this should only run once.
        // TODO force re-run when submodule updated
        outputs.file('src/main/jni/libsodium/libsodium-android-armv6/lib/libsodium.a')
        workingDir 'src/main/jni/libsodium'
        environment ANDROID_NDK_HOME: "$android.ndkDirectory"
        environment NDK_PLATFORM: "android-16"
        commandLine 'dist-build/android-arm.sh'
    }

    task ndkClean(type: Exec) {
        commandLine "$android.ndkDirectory/ndk-build", '-C', file('src/main/jni').absolutePath, 'clean'
    }

    task hostServald(type: Exec) {
        // assumes that autoconf && configure have been run manually
        inputs.files(fileTree(dir: 'src/main/jni/serval-dna', includes: ['*.c', '*.h']))
        outputs.file('src/main/jni/serval-dna/servald')
        workingDir 'src/main/jni/serval-dna'
        commandLine "make", '-j', Runtime.runtime.availableProcessors(), 'servald'
    }

    clean.dependsOn 'ndkClean'
}

ext {
    supportLibraryVersion = '25.3.1'
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "com.android.support:appcompat-v7:$supportLibraryVersion"
    compile "com.android.support:design:$supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$supportLibraryVersion"
    testCompile 'junit:junit:4.12'
}

afterEvaluate {
    def keyring = project.findProperty("serval.keyring")
    def keyringFile = keyring ? file(keyring) : null
    if (keyringFile && !keyringFile.exists())
        keyringFile = null;
    def entryPin = null;

    android.applicationVariants.all { variant ->
        // run ndk build
        def variantName = variant.name.capitalize()
        def ndkTaskName = "build${variantName}Ndk"

        task "$ndkTaskName"(type: Exec, dependsOn: libsodiumBuild) {
            executable = "$android.ndkDirectory/ndk-build"
            if (variant.buildType.name == "debug")
                args += 'NDK_DEBUG=1'
            args += ['-C', file('src/main/jni').absolutePath, '-j', Runtime.runtime.availableProcessors()]
        }

        tasks["compile${variantName}Ndk"].dependsOn "$ndkTaskName"

        // Prompt for key passwords, if the signing config came from this build file
        // (Android studio gui has a way to trigger this from an external singing config)
        if (project.tasks.findByName("install$variantName")) {
            // add a manifest to any built apk, based on user config
            def confType = "debug"
            if (variant.name == "release")
                confType = android.releaseType

            def manifestId = project.findProperty("${confType}.manifest.id");
            def secret = project.findProperty("${confType}.manifest.secret");
            def author = project.findProperty("${confType}.manifest.author");
            def bk = project.findProperty("${confType}.manifest.bk");

            def promptTask = "prompt${variantName}Pwd"
            task "$promptTask" {
                doLast {
                    if (variant.buildType.name != "debug"
                            && variant.signingConfig
                            && variant.signingConfig.storeFile
                    ) {
                        def signConfig = android.signingConfigs.findByName([variant.signingConfig.name]);
                        if (signConfig != null) {
                            if (signConfig.storeFile != null && signConfig.storeFile.exists()) {
                                if (!signConfig.storePassword)
                                    signConfig.storePassword = readPassword("Enter password for jar signing keystore:")
                                if (!signConfig.keyPassword)
                                    signConfig.keyPassword = readPassword("Enter password for jar signing key:")
                            }
                        }
                    }
                    if (keyringFile != null && author != null && entryPin == null)
                        entryPin = readPassword("Enter serval keyring entry pin:")
                }
            }
            tasks["validateSigning${variantName}"].dependsOn "$promptTask"
            // run the prompt task first as it doesn't work well with other parallel tasks
            preBuild.mustRunAfter "$promptTask"

            // TODO supported method to seed this id?
            if (manifestId && (secret || (author && keyring))) {
                variant.outputs.each { output ->
                    def taskName = "manifest$variantName"
                    task "$taskName"(type: Exec, dependsOn: hostServald) {
                        environment SERVALINSTANCE_PATH: file('build/serval/').absolutePath
                        if (keyringFile != null && author != null) {
                            environment SERVALD_KEYRING_READONLY: "true"
                            environment SERVALD_KEYRING_PATH: keyring
                        }
                        executable = hostServald.outputs.files[0]
                        doFirst {
                            args = ['rhizome', 'add', 'file']
                            if (keyringFile != null && author != null && entryPin)
                                args += "--entry-pin=$entryPin"
                            args += [
                                    '--zip-comment',
                                    author ?: "",
                                    output.outputFile,
                                    '',
                                    secret ?: "",
                                    "service=file"
                            ]
                            if (manifestId)
                                args += "id=$manifestId"
                            if (bk)
                                args += "BK=$bk"
                            if (confType == "release")
                                args += "name=${android.appName}-${variant.versionName}.apk"
                            else
                                args += "name=${android.appName}-${confType}-${variant.versionName}.apk"
                            if (android.cleanBuild && confType != "development")
                                args += "version=$variant.versionCode"
                            else
                                args += "version=$android.buildTime"
                        }
                        doLast {
                            delete(file('build/serval/'))
                        }
                    }
                    tasks["$taskName"].dependsOn "package$variantName"

                    output.assemble.dependsOn "$taskName"
                }
            }
        }
    }
}
